// ================= Configuração Hercules ==================================
// = _          _   _                     _           
// =| |__  _ __| | | | ___ _ __ ___ _   _| | ___  ___ 
// =| '_ \| '__| |_| |/ _ \ '__/ __| | | | |/ _ \/ __|
// =| |_) | |  |  _  |  __/ | | (__| |_| | |  __/\__ \
// =|_.__/|_|  |_| |_|\___|_|  \___|\__,_|_|\___||___/
// ================= Licença ================================================
// = Este arquivo é parte do Hércules.
// = Http://herc.ws - http://github.com/HerculesWS/Hercules
// = 
// = Emulador traduzido e atualizado para Português.
// = http://github.com/brHercules/Herc
// =
// = Copyright (C) 2014-2016 Hercules Dev Team
// =
// = Hercules é um software livre: você pode redistribuí-lo e / ou modificá
// =-Lo sob os termos da GNU General Public License conforme publicada pela
// = Free Software Foundation, tanto a versão 3 da licença, ou
// = (A seu critério) qualquer versão posterior.
// =
// = Este programa é distribuído na esperança que possa ser útil,
// = Mas SEM QUALQUER GARANTIA; mesmo sem a garantia implícita de
// = COMERCIALIZAÇÃO ou ADEQUAÇÃO A UM DETERMINADO FIM. veja a
// = GNU General Public License para mais detalhes.
// =
// = Você deve ter recebido uma cópia da Licença Pública Geral GNU
// = Junto com este programa. Se não, veja <http://www.gnu.org/licenses/>.
//=========================================================================
// = Arquivo de configuração Hercules Sockets
// ================================================ =========================

socket_configuration: {
// Quanto tempo pode uma tenda tomada antes de fechar a conexão (em segundos)?
	stall_time: 60

	// Relatórios de exibição de depuração (Quando algo dá errado durante o relatório, o relatório é salvo.)
	debug: false

	// Linux / Epoll: Maxmimum eventos por ciclo
	// Valor padrão:
	// (Maxmimum conexões suportadas) / 2
	// NOTA: este controla as máximas recolhidas soquete-eventos por ciclo (chamada para epoll_wait ())
	// Por exemplo, configurações isso para 32 permitirá que até 32 eventos (incomming dados / novas conexões
	// Por ciclo-servidor.
	// NOTA: Recomenda Configurações é, pelo menos, metade das ligações maxmimum suportada
	// Configurações isso para um valor mais baixo, pode causar GAL / atrasos
	// Dependendo está disponível Tempo de CPU
	// NOTA: Esta definição só está disponível em Linux quando construção utilizando epoll como despachante evento!
	//	
	//epoll_maxevents: 1024

	// Tamanho máximo permitido para clientes pacotes em bytes.
	// Valores padrão:
	// 24576 (clientes <20.131.223)
	// 65535 (Clientes> = 20131223)
	// NOTA: Para reduzir o tamanho dos pacotes relatados, diminuir os valores da define, que
	// Foram personalizados, tais como MAX_STORAGE, MAX_GUILD_STORAGE ou MAX_CART.
	// NOTA: Não modifique essa configuração, a menos que o cliente tenha sido modificado para suportar
	// pacotes maiores. O cliente irá falhar, quando recebe pacotes maiores.
	//socket_max_client_packet: 65535

	// ----- Regras IP Configurações -----
	ip_rules: {
	// Se IP do são verificados durante a ligação.
	// Isso também permite a proteção DDoS.
		enable: true

		// Ordem dos cheques
	// Negar, permitir que: Verifica regras de negação, em seguida, permitir que as regras. Permite que se não houver regras de jogo.
	// Permitir, negar: Verifica regras de permissão, em seguida, negar regras. Permite que se não houver regras de jogo.
	// Mútua falha: Permite somente se uma permitir que corresponde à regra e sem regras de negação jogo.
	// (O padrão é negar, permitir)
		order: "deny,allow"

	// as regras de IP
	// Permitir que: aceita ligações a partir da faixa de ip (mesmo se marcado como DDoS)
	// Negar: Rejeita conexões do intervalo ip
	// As regras são processadas em ordem, a primeira regra de correspondência de cada lista (permitir e negar) é usado
	allow_list: (
	//"127.0.0.1 ",
	//"192.168.0.0/16 ",
	//"10.0.0.0/255.0.0.0 ",
	//"todos",
		)
		deny_list: (
			//"127.0.0.1",
		)
	}

	// ---- Configurações de proteção DDoS ----
	// Se solicitação de conexão ddos.count são feitas dentro ms ddos.interval, ele assume que é um ataque DDoS
	ddos: {
	// Intervalo de tentativas consecutivas (ms)
	// (O padrão é 3000 ms, 3 segundos)
	interval: 3000 // ddos_interval

		// tentativas consecutivas desencadear
		// (O padrão é 5 tentativas)
		count: 5 //ddos_count

		// O intervalo de tempo após o qual a ameaça de DDoS é assumido a ser lido (ms)
		// Após este período de tempo, as restrições DDoS são levantadas.
		// (O padrão é 600000ms, 10min)
		autoreset: 600000 //ddos_autoreset
	}
}

import: "conf/import/socket.conf"
